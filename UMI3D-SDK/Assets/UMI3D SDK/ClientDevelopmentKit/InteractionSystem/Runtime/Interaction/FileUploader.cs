/*
Copyright 2019 - 2021 Inetum

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using inetum.unityUtils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using umi3d.common;
using umi3d.common.interaction;


namespace umi3d.cdk.interaction
{
    /// <summary>
    /// Class to manage uploaded files
    /// </summary>
    public static class FileUploader
    {
        private const DebugScope scope = DebugScope.CDK | DebugScope.Interaction;

        /// <summary>
        /// Dictionary to store file path by fileID.
        /// <list type="bullet">
        /// <item>key: fileId</item>
        /// <item>value: path</item>
        /// </list>
        /// </summary>
        private static readonly Dictionary<string, string> filesToUpload = new();

        static bool FileExist(string path)
        {
            if (!File.Exists(path))
            {
                UMI3DLogger.LogWarning($"File at path {path} does not exist. The file may have been moved since it has been added here.", scope);
                return false;
            }

            return true;
        }

        /// <summary>
        /// Try get the path of a file by its fileID.<br/>
        /// <br/>
        /// Return true if 'path' has been set with the path stored by the key 'fileId', else return false.
        /// </summary>
        /// <param name="fileId"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        public static bool TryGetPath(string fileId, out string path)
        {
            return filesToUpload.TryGetValue(fileId, out path);
        }

        /// <summary>
        /// Try get the name of the file from its fileId if it is in filesToUpload.
        /// </summary>
        /// <param name="fileId"></param>
        /// <returns></returns>
        public static bool TryGetFileName(string fileId, out string fileName)
        {
            // Try to get the path of the file by the key 'fileId'.
            if (!TryGetPath(fileId, out string path))
            {
                // If there is no path log a message and return false.
                UMI3DLogger.LogWarning($"[{nameof(TryGetFileName)}] FileID {fileId} has no link to path.", scope);
                fileName = null;
                return false;
            }

            // Check if there is a valid file at this 'path'.
            if (!FileExist(path))
            {
                // If there is no file return false.
                fileName = null;
                return false;
            }

            // Get the file name.
            fileName = System.IO.Path.GetFileName(path);
            return true;
        }

        /// <summary>
        /// Try get the file in byte from its fileId if it is in filesToUpload.
        /// </summary>
        /// <param name="fileId">The id file generated by TryStorePath </param>
        /// <param name="fileInByte">The file in byte.</param>
        /// <returns></returns>
        public static bool TryGetFileToUpload(string fileId, out byte[] fileInByte)
        {
            // Try to get the path of the file by the key 'fileId'.
            if (!TryGetPath(fileId, out string path))
            {
                UMI3DLogger.LogWarning($"[{nameof(TryGetFileToUpload)}] FileID {fileId} has no link to path.", scope);
                fileInByte = null;
                return false;
            }

            // Check if there is a valid file at this 'path'.
            if (!FileExist(path))
            {
                fileInByte = null;
                return false;
            }

            // Remove the association 'fileId' -> 'path'.
            filesToUpload.Remove(fileId);

            // Set the 'fileInByte'.
            fileInByte = File.ReadAllBytes(path);
            return true;
        }

        /// <summary>
        /// Try to store the <paramref name="path"/> by <paramref name="fileId"/>.<br/>
        /// If the path is valid compute <paramref name="fileId"/> and store the path by <paramref name="fileId"/>..<br/> 
        /// </summary>
        /// <param name="path">Path of the file on disk.</param>
        /// <returns></returns>
        public static bool TryStorePath(string path, out string fileId)
        {
            // Check if the file at 'path' exist.
            if (!File.Exists(path))
            {
                UnityEngine.Debug.LogError($"This file doesn't exist in your device. Path: {path}");
                fileId = null;
                return false;
            }

            // Compute a new fileID for the file.
            fileId = Guid.NewGuid().ToString();

            // Store the file with the key fileID.
            filesToUpload.Add(fileId, path);

            return true;
        }

        /// <summary>
        /// Callback of an input from the User.
        /// </summary>
        /// <param name="parameterDto"></param>
        public static void UploadFileInputCallback(AbstractParameterDto parameterDto)
        {
            // Check if the dto parameter is a 'UploadFileParameterDto'.
            if (parameterDto is not UploadFileParameterDto uploadFileDto)
            {
                UnityEngine.Debug.LogError($"Wrong parameter. Expected: {typeof(UploadFileParameterDto)}, get: {parameterDto.GetType()}");
                return;
            }

            // Get the path of the file to upload
            string pathValue = uploadFileDto.value;

            // Store the path with the new 'fileId'.
            if (!TryStorePath(pathValue, out string fileId)) { return; }

            var req = new UploadFileRequestDto()
            {
                parameter = uploadFileDto,
                fileId = fileId,
                toolId = 0,
                id = uploadFileDto.id,
                hoveredObjectId = 0
            };

            UMI3DClientServer.SendRequest(req, true);
        }

        /// <summary>
        /// Send upload request when a form contains an Upload File Parameter.
        /// </summary>
        /// <param name="form"></param>
        public static void CheckFormToUploadFile(ulong environmentId, FormDto form)
        {
            form.fields
                .Select(async id => (await UMI3DEnvironmentLoader.WaitForAnEntityToBeLoaded(environmentId, id, null)).dto)
                .ForEach(async p =>
                {
                    var param = await p;
                    if (param is UploadFileParameterDto ParameterDto)
                    {
                        UMI3DLogger.Log(param.ToJson(), scope);
                        string pathValue = (param as UploadFileParameterDto).value;//the path of the file to upload
                                                                                   // -> create request with TryStorePath

                        if (!TryStorePath(pathValue, out string fileId)) { return; }

                        var req = new UploadFileRequestDto()
                        {
                            parameter = param,
                            fileId = fileId,
                            toolId = 0,
                            id = ParameterDto.id,
                            hoveredObjectId = 0
                        };
                        UMI3DClientServer.SendRequest(req, true);
                    }
                });
        }
    }
}